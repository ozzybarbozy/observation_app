datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  role          Role          @default(USER)
  accounts      Account[]
  sessions      Session[]
  observations  Observation[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Observation {
  id          String          @id @default(cuid())
  type        ObservationType
  description String
  location    String
  photos      Photo[]
  status      Status          @default(PENDING)
  actions     Action[]
  reporter    User            @relation(fields: [reporterId], references: [id])
  reporterId  String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model Photo {
  id            String      @id @default(cuid())
  url           String
  observation   Observation @relation(fields: [observationId], references: [id])
  observationId String
}

model Action {
  id            String      @id @default(cuid())
  description   String
  observation   Observation @relation(fields: [observationId], references: [id])
  observationId String
  createdAt     DateTime    @default(now())
}

enum Role {
  USER
  ADMIN
}

enum ObservationType {
  POSITIVE
  NEGATIVE
}

enum Status {
  PENDING
  IN_PROGRESS
  RESOLVED
}
