datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String?   @unique
  username        String    @unique
  password        String?
  role            Role      @default(USER)
  resetToken      String?
  resetTokenExpiry DateTime?
  accounts        Account[]
  sessions        Session[]
  observations    Observation[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Observation {
  id          String   @id @default(cuid())
  title       String
  type        ObservationType
  category    ObservationCategory
  severity    ObservationSeverity
  description String
  locations   String   // Store as comma-separated string
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  photos      Photo[]
  actions     Action[]
}

model Photo {
  id            String       @id @default(cuid())
  url           String
  observation   Observation  @relation(fields: [observationId], references: [id])
  observationId String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Action {
  id            String       @id @default(cuid())
  description   String
  status        ActionStatus @default(PENDING)
  observation   Observation  @relation(fields: [observationId], references: [id])
  observationId String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum ObservationType {
  SAFETY
  QUALITY
  ENVIRONMENT
}

enum ObservationCategory {
  HAZARD
  INCIDENT
  NEAR_MISS
  IMPROVEMENT
  GOOD_PRACTICE
  POTENTIAL_NONCONFORMITY
}

enum ObservationSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ActionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
